#!/usr/bin/env python
# coding: utf-8

# In[4]:


# –ò–ú–ü–û–†–¢ –í–°–ï–• –ë–ò–ë–õ–ò–û–¢–ï–ö
import math as m
import time
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import streamlit as st
import altair as alt
####### –§–£–ù–ö–¶–ò–ò–ò

#–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    return pd.read_csv("https://raw.githubusercontent.com/aiedu-courses/all_datasets/main/Population.csv", delimiter=';')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è 0 - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, 1 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å // –º–æ–∂–Ω–æ –∏ –Ω–µ 1)))

def chat(text, x):
    if x == 0:
        st.chat_message("assistant").write(text)
    else:
        st.chat_message("user").write(text)
       
# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞ –º–µ–∂–¥—É –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –¥–≤—É—Ö —Å—Ç—Ä–∞–Ω
@st.cache_data
def Pirson(B, C, df):
    Country1 = df.loc[B][1:].astype(float)
    Country2 = df.loc[C][1:].astype(float)
    Corr = Country1.corr(Country2)
    return Corr
    
# –ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ–¥—É
@st.cache_data
def population_year(year):
    
       start_year = 1960
       index_year = int(year - start_year)
       popu = Country1[index_year]
       
       st.write(f'üíÅ‚Äç‚ôÄÔ∏è*–ù–∞—Å–µ–ª–µ–Ω–∏–µ* {Name1} *–≤* {year} *–≥–æ–¥—É* - {popu:,.0f}')
    
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∞ - –∫–æ—ç—Ñ. –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ü–∏—Ä—Å–æ–Ω–∞
@st.cache_data
def correlationPir(B,country,df):
    correlation = []
    for i in range(0,266):
        correlation.append(Pirson(B, i,df)) # –°–ß–ò–¢–ê–Æ –ö–ö–ü –¥–ª—è –ë–æ–ª–≥–∞—Ä–∏–∏ –∏ i-–æ–π —Å—Ç—Ä–∞–Ω—ã + –¥–æ–±–∞–≤–ª—è—é –ö–ö–ü –≤ –º–∞—Å—Å–∏–≤    
    corr_data = pd.DataFrame({         # —Ç–∞–±–ª–∏—Ü–∞ –°—Ç—Ä–∞–Ω–∞ - –ö–ö–ü
            'Country': country,
            'Pirson Correlation':correlation
       })
    corr_data = corr_data.sort_values(by='Pirson Correlation',ascending=False)
    return corr_data

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:
def save(name, fig):
    file_name = name
    fullpath = f"C:/Users/–ù–∏–∫–∏—Ç–∞/Desktop/{file_name}.png"
    if file_name:  
     try:
        fig.savefig(fullpath,dpi=300, bbox_inches='tight')
        st.write('*–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ*')
     except Exception as noway:
        st.write(f'–û—à–∏–±–∫–∞ {noway}')
        fig.savefig('C:/Users/–ù–∏–∫–∏—Ç–∞/Desktop/heatmap.png',dpi=300,bbox_inches='tight', pad_inches='0.5')
        st.write('*–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –∫–∞–∫ default.png*')

# –°–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@st.cache_data
def image_setter(x):
    name =  ['https://i.pinimg.com/originals/84/8d/7c/848d7c6b1d27d9c484463b2e16cb406b.gif',
             'https://i.pinimg.com/originals/85/05/05/8505051384604a66d6af0f6662e7dd44.gif',
             'https://i.pinimg.com/originals/67/34/b0/6734b0c9b53211b35430606fffb385ad.gif',
             'https://i.pinimg.com/originals/f2/eb/43/f2eb4304c9c154cb56fdfc20c0641114.gif',
             'https://i.pinimg.com/originals/76/7d/68/767d687e4a8b796f54553c0b0fe641a3.gif',
             'https://i.pinimg.com/originals/2a/df/bf/2adfbfcda9ac11be42f243367f2f6fd7.gif',
             'https://i.pinimg.com/originals/e2/4d/bb/e24dbbe9ce331da8424d88f14eba3891.gif',
             'https://i.pinimg.com/originals/f3/58/57/f3585768009c22148ce472033e93ac2e.gif',
             'https://i.pinimg.com/originals/39/f9/78/39f978cf23dfbe5d0f0c389e7c35a82e.gif',
             'https://i.pinimg.com/originals/d9/84/39/d984395bfb4cbd10a7e4d764ae760c67.gif'
    ]
    url = name[int(x)]
    st.image(url)
    
######## –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
st.set_page_config(layout="centered", page_title="–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã", page_icon="üìà") # –ú–∞–∫–µ—Ç
df = load_data()
years = df.columns[1:].astype(int) # –ú–ê–°–°–ò–í –ò–ó –ì–û–î–û–í
country = df['Country Name'].values # –ú–ê–°–°–ò–í –°–¢–†–ê–ù
counts = len(years) # –ß–ò–°–õ–û –ì–û–î–û–í)))

# –°–û–ó–î–ê–ù–ò–ï –ß–ê–¢–ê

# —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
if 'x' not in st.session_state:
    st.session_state.x = 0
if 'name' not in st.session_state:
    st.session_state.name =''
if 'image' not in st.session_state:
    st.session_state.image = int(0)
    
if st.session_state.x == 0:
    chat('**–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É**',0)
    user_name = st.selectbox('–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É',options=country, index=None)
    if user_name != None:
      st.session_state.x = 1
      st.session_state.name= user_name
if st.session_state.x == 1:
    Name1 = st.session_state.name
    st.session_state.x = 2
    chat(f'**–Ø –≤—ã–±—Ä–∞–ª {Name1}**', 1)   
    time.sleep(0.5)
    chat("**–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –≤ :rainbow[–ú–ï–ù–Æ] —Å–ª–µ–≤–∞**", 0)
# –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–π–¥–±–∞—Ä–∞
if st.session_state.x == 2:
    Name1 = st.session_state.name
    
    Country1 = df[df['Country Name'] == Name1].values[0][1:].astype(int)
    B = df.loc[df['Country Name'] == Name1].index[0] # –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞–Ω—ã 1
    with st.sidebar:
        with st.container(key='g'):
            st.write('–ü–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ streamlitüò∂‚Äçüå´Ô∏èü•∂ \n *tg*: @jktm18üì±‚å®Ô∏è \n *gmail*:kulikov123451@gmail.comüìßüñ•Ô∏è')
        with st.form('my form'):
             with st.container(key='j'): 
               image_setter(st.session_state.image)
               
               with st.expander(':rainbow[**–ú–ï–ù–Æ**]', expanded=False):
                            
                            show_heatmap = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É")
                            population_plot=st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è –æ—Ç –≥–æ–¥–∞")
                            year = st.slider("–í—ã–±–µ—Ä–∏ –≥–æ–¥üòà", min_value=int(df.columns[1]), max_value=int(df.columns[-1])) # –í–´–ë–û–† –ì–û–î–ê
                            with st.container():
                              show_population = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥")
                              mean_std = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ –≥–æ–¥–∞–º")
                              population_max = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ") 
                            
                            submitted = st.form_submit_button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",type='primary')
        with st.container(border=True,key='y'):
           submitted_two = st.toggle('üîô:violet[–°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã]')
           submitted_three = st.toggle('üåÉ:violet[–ü—Ä–æ –¥–∞—Ç–∞ —Å–µ—Ç]')
            
    #–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Å–µ—Ç–µ
    if submitted_three:
         st.write('***–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ :red[–Ω–∞—Å–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω] –ø–æ :blue[–≥–æ–¥–∞–º]***')
         st.write(df)
        
    # –°–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã     
    if submitted_two:
                st.session_state.x = 0
                st.session_state.name=None
                st.rerun()
   
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
    if submitted:
          if st.session_state.image < 9:
                  st.session_state.image +=1
          else:
              st.session_state.image = 0
   
          #–ù–∞—Å–µ–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ–¥
          if show_population:
              
              population_year(year)
              
          #–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è   
          if mean_std:
            
            mean1 = np.mean(Country1)
            std1 = np.std(Country1)
            st.write(f'üíÅ*–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã*: {mean1:,.0f} ¬± {std1:,.0f}')

          #–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–∏—è    
          if population_max:
              
            pop_max = np.max(Country1)
            st.write(f'üíÅ‚Äç‚ôÇÔ∏è*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞—Å–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã*: {pop_max:,.0f}')

          # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞    
          if show_heatmap:
              
              data = correlationPir(B,country,df)
              data = data[data['Country'] != 'Not classified']
              st.subheader('Heatmap: Pirson Correlation(Country)')
              heatmap = alt.Chart(data).mark_rect().encode(
                  y=alt.Y('Country:O', sort=alt.SortField('Pirson Correlation', order='descending')), 
                  color='Pirson Correlation:Q'
              ).properties(
                  width=800,
                  height=500,
                  )
            
              st.altair_chart(heatmap,use_container_width=False)
              
          # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
          if population_plot:
              data =pd.DataFrame({'Years':years, 'Population':Country1})
              st.subheader('Graph: Population(Years)')
              s = st.line_chart(data,x='Years', y='Population', x_label='–ì–æ–¥',y_label='–ù–∞—Å–µ–ª–µ–Ω–∏–µ')
              
                    
                    


# In[ ]:




